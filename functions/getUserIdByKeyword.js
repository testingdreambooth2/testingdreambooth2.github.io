// functions/getUsers.js
const axios = require('axios');

exports.handler = async function (event, context) {
  // Extracting keyword from the query parameters
  const keyword = event.queryStringParameters.keyword;

  if (!keyword) {
    return {
      statusCode: 400,
      body: JSON.stringify({ error: 'Missing keyword parameter' }),
    };
  }

  // Define CORS headers
  const headers = {
    'Access-Control-Allow-Origin': 'https://xn--kbrbx-vua.dk',
    'Access-Control-Allow-Methods': 'GET',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Access-Control-Allow-Credentials': 'true',
    };

  // Respond to preflight request
  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 200,
      headers: headers,
      body: '',
    };
  }

  // Log the keyword
  console.log('Keyword:', keyword);

  try {
    const response = await axios.get(`https://users.roblox.com/v1/users/search?keyword=${keyword}&limit=10`, {
      headers: {
        'accept': 'application/json',
        'Cookie': 'Cookie:  .ROBLOSECURITY=_|WARNING:-DO-NOT-SHARE-THIS.--Sharing-this-will-allow-someone-to-log-in-as-you-and-to-steal-your-ROBUX-and-items.|_18B5BB8E39C324D858B5DB8F0C2A436B2EB99126219D8B8923E846F04F12242C83B35D2DCB11C47FFA66E383C7D6E8B5CF008851B45183F5B92134CC601C64465F09D0E780E02C3D7754F1B570E07A97FB3269CB8716EB6C7CF840A55C05C08F39DCB70A1140A129D1FB64A3B8DD4FD95EBB36AFA65DED53C88743D63FABAEC2AB7700329550BF3ADF176EECD04B00AFE1886249D10A816EBC100D56124CCF19731005B57203709FE08BF5C4C58E7E30D005F7D6301412DC04611E22E2C4421F9728457FA687FBAE7F65768C7ACC919D472BC020F710CE2F0C866B3E9C98398077FE64B6633FE9AE7521966DDC8815BD6B3F100787FBB7A1DC760C871EF36C7AC89115666EE114791DE31809A25E2832A328EC83F3042B5B4B126DEE3373D410E1EBD9E070F268BFB3AB31E6BB4D2A58330EA9A9BDE6622AEB913CF714B1E900691CB48FA4F94CF04ECDFC91AEDF71C2FB263D5B2D61371409808B9B80660FC952510B5CC0DE87059E69CA894C71C8C25B98692949D3A2E0218682FF43A58D9B16EA26035455E707FDFF212E0F537E729B2CACECA0B83EDE0B5A35E413B7031E6A1C1EBE8629A6B6D7E08CD3E1DE2ECEEB8F8D6B6AC0527C4F53D76F04DBBECAC9C959E620B66C937979A72388573F1344D1BFEB740FCE55C210DF079F63A9103E726886BFC4C53C4990716C337630ADD594FBCC78BBF07D37CAB5C0265AD875D84AF3A2E5A68E348978EEFED83DE3034A03217334D4F4A4ADFBFBBBC681AE190D74B50DF00EC09F5CFD10A01EE470CB7681DE1C631E142EBC41A720F19AE24CD889A9DB38D4A24BE6D6B48296097349841346B06D5F0102D5D0FBAAF706BCD7A626AF52CA609E30E5219B2D842B0FE367C0FFC665C495DE3481EE222377347DF7F6D6745DB423EC9200D9AAB7C58C9718BCF644DE0CA9F9B6416FC253FDA456FA6C1D3336771450D3D15750D2E4EB61102E12C67A9842E6579F8D12F44558B632DA243D41088683AA796FCD76A4299C5EDBDA0217A0C5BB619E075B18D15A78D4BCA61C0991F57317F73E31691CAA5E1721F9AE;',

      }
    });

    // Log the response
    console.log('Response:', response.data);

    return {
      statusCode: 200,
      headers: headers,
      body: JSON.stringify(response.data),
    };
  } catch (error) {
    console.error(error);
    return {
      statusCode: 500,
      headers: headers,
      body: JSON.stringify({ error: 'Internal Server Error' }),
    };
  }
};
